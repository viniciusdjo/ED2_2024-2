#include <stdio.h>
#include <stdlib.h>

// estrutura de um nó na fila
typedef struct Node {
    int data;            // valor armazenado no nó
    struct Node* next;   // ponteiro p/ próximo nó
} Node;

// estrutura da fila
typedef struct Queue {
    Node* front;         // ponteiro p/ primeiro nó da fila
    Node* rear;          // ponteiro p/ último nó da fila
} Queue;

// criar uma nova fila
Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));  // aloca memória para a fila
    if (q == NULL) {                           // verifica se a alocação deu certo
        printf("Falha na alocação de memória para a fila.\n");
        return NULL;
    }
    q->front = q->rear = NULL;                 // começa a fila como vazia
    return q;
}

// adicionar um elemento à fila
void enqueue(Queue* q, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));  // cria um novo nó
    if (newNode == NULL) {                       // verifica se a alocação deu certo
        printf("Falha na alocação de memória para o novo nó.\n");
        return;
    }
    newNode->data = value;                      // define o valor do novo nó
    newNode->next = NULL;                      
    if (q->rear == NULL) {                      
        q->front = q->rear = newNode;          
    } else {                                    
        q->rear->next = newNode;              
        q->rear = newNode;                 
    }
}

// remover um elemento da fila
int dequeue(Queue* q) {
    if (q->front == NULL) {                     
        printf("Fila está vazia.\n");
        return -1;                              // retorna um valor inválido
    }
    Node* temp = q->front;                     
    int data = temp->data;                     
    q->front = q->front->next;             
    if (q->front == NULL) {                  
        q->rear = NULL;                       
    }
    free(temp);                               
    return data;
}

// verificar se a fila está vazia
int isEmpty(Queue* q) {
    return q->front == NULL;                  
}

// imprimir os elementos da fila
void printQueue(Queue* q) {
    if (isEmpty(q)) {                         
        printf("A fila está vazia.\n");
        return;
    }
    Node* temp = q->front;                  
    printf("Elementos da fila: ");
    while (temp != NULL) {                   
        printf("%d ", temp->data);          
        temp = temp->next;                
    }
    printf("\n");
}

// contar o número de elementos na fila
int countElements(Queue* q) {
    int count = 0;                          
    Node* temp = q->front;                
    while (temp != NULL) {                 
        count++;                           
        temp = temp->next;                 // move para o próximo nó
    }
    return count;                          
}

// limpar todos os elementos da fila e liberar a memória
void clearQueue(Queue* q) {
    Node* temp;
    while (q->front != NULL) {              
        temp = q->front;                  
        q->front = q->front->next;        
        free(temp);                      
    }
    q->rear = NULL;                       
}

int main() {
    Queue* q = createQueue();  
    
    enqueue(q, 10);            
    enqueue(q, 20);
    enqueue(q, 30);
    printQueue(q);            
    
    printf("Número de elementos na fila: %d\n", countElements(q));
    
    printf("Desenfileirado: %d\n", dequeue(q));  
    printQueue(q);          
    
    printf("Número de elementos na fila: %d\n", countElements(q));
    
    clearQueue(q);           
    printQueue(q);           
    
    free(q);                 
    return 0;
}
